<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>系统网络</title>
    <script src="https://a.alipayobjects.com/jquery/jquery/1.11.1/jquery.js"></script>
    <script src="https://a.alipayobjects.com/g/datavis/g6/0.2.1/index.js"></script>
</head>
<body>
<div id="c1"></div>
<script type="text/javascript">
    $.getJSON('/monitor', function(data){
        var Layout = G6.Layout;
        var Util = G6.Util;
        var GraphUtil = G6.GraphUtil;
        var map = {};
        var maxValue = 0;
        var maxValueTmp;
        var layout;
        var sizeDomain = 20;

        G6.Global.nodeLabelStyle = {
            fill: '#666',
            textAlign: 'center',
            fontSize: 14,
            textBaseline: 'middle'
        };

        G6.registNode('rect',{
            getAnchorPoints: null
        });

        G6.registEdge('bezierQuadratic',{
            afterDraw: function(cfg, group, edge){
                var points = cfg.points;
                var start = points[0];
                var end = points[points.length - 1];
                var center = edge.getPoint(0.5);
                var lineWidth = edge.attr('lineWidth');
                if(lineWidth < 5){
                    lineWidth = 5;
                }
                // 关于自身坐标系构造一个形，作为箭头
                var arrow = group.addShape('polyline', {
                    attrs:{
                        points: [
                            [-lineWidth/4, lineWidth/2],
                            [lineWidth/4, 0],
                            [-lineWidth/4, -lineWidth/2]
                        ],
                        stroke: '#333'
                    },
                    class: 'arrow'
                });
                arrow.hide();
                GraphUtil.arrowTo(arrow, center.x, center.y, center.x, center.y, end.x, end.y);
            }
        });

        Util.each(data.nodes, function(node){
            map[node.id] = node;
        });

        Util.each(data.edges, function(edge){
            maxValueTmp = parseInt(edge.value);
            if(maxValueTmp > maxValue) maxValue = maxValueTmp;
        });

        layout = new Layout.Force({
            nodes: data.nodes,
            edges: data.edges,
            stiffness: 100.0,         // 硬度
            damping: 0.1,             // 阻尼
            minEnergyThreshold: 200,  // 能量域值
            repulsion: 2000.0         // 斥力
        });

        var graph = new G6.Graph({
            id: 'c1',           // 容器ID
            forceFit: true,     // 宽度自适应
            height: 450,        // 画布高
            zoomable: true,     // 是否支持画布缩放
            dragable: true,     // 是否支持元素拖动
            selectable: true,   // 是否允许选中
            shortcutable: true  // 是否开启快捷键
        });
        graph.source(data.nodes, data.edges);
        graph.node()
            .label('id')
            .style({
                fill: 'white',
                fillOpacity: 0.8
            });
        graph.edge()
            .size('value', function(val){
                return Math.pow(parseInt(val)/maxValue, 1/3) * sizeDomain;
            })
            .style({
                opacity: 0.2
            })
            .shape('bezierQuadratic');
        layout.onNodeChange = function(id, point){
            map[id].x = point.x*60+400;
            map[id].y = point.y*60+400;
        };
        layout.onFinish = function(){
            graph.render();
        };
        graph.on('mouseenter', function(ev){
            var item = ev.item;
            var group;
            var arrow;
            if(!item || ev.itemType === 'edge') return;
            var unRelativeItems = item.getUnRelativeItems();
            var edges = item.get('edges');
            Util.each(unRelativeItems, function(v){
                v.hide();
            });
            Util.each(edges, function(v){
                group = v.get('group');
                arrow = group.findByCFG('class', 'arrow')[0];
                arrow.show();
            });
            graph.refresh();
        });

        graph.on('mouseleave', function(ev){
            var item = ev.item;
            var group;
            var arrow;
            if(!item || ev.itemType === 'edge') return;
            var unRelativeItems = item.getUnRelativeItems();
            var edges = item.get('edges');
            Util.each(unRelativeItems, function(v){
                v.show();
            });
            Util.each(edges, function(v){
                group = v.get('group');
                arrow = group.findByCFG('class', 'arrow')[0];
                arrow.hide();
            });
            graph.refresh();
        });
    });
</script>

</body>
</html>
          